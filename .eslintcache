[{"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\index.js":"1","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\App.js":"2","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\routes\\HomeTab.js":"3","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Map\\index.js":"4","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\CityList\\index.js":"5","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Profile\\index.js":"6","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\News\\index.js":"7","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\index.js":"8","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Home\\index.js":"9","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\NavHeader\\index.js":"10","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\index.js":"11","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\url.js":"12","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\request.js":"13","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\SearchHeader\\index.js":"14","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\Filter\\index.js":"15","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\FilterMore\\index.js":"16","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\FilterTitle\\index.js":"17","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\FilterPicker\\index.js":"18","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\FilterFooter\\index.js":"19","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\HouseItems\\index.js":"20","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\Sticky\\index.js":"21","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\NoHouse\\index.js":"22","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseDetail\\index.js":"23","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\HousePackage\\index.js":"24","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Login\\index.js":"25","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Register\\index.js":"26","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\token.js":"27"},{"size":583,"mtime":1612668782840,"results":"28","hashOfConfig":"29"},{"size":1280,"mtime":1612684270585,"results":"30","hashOfConfig":"29"},{"size":2816,"mtime":1612445087502,"results":"31","hashOfConfig":"29"},{"size":7728,"mtime":1612582838165,"results":"32","hashOfConfig":"29"},{"size":6640,"mtime":1612699166362,"results":"33","hashOfConfig":"29"},{"size":5039,"mtime":1612699025978,"results":"34","hashOfConfig":"29"},{"size":1509,"mtime":1612638101439,"results":"35","hashOfConfig":"29"},{"size":6279,"mtime":1612667047365,"results":"36","hashOfConfig":"29"},{"size":4779,"mtime":1612637719932,"results":"37","hashOfConfig":"29"},{"size":724,"mtime":1612634818326,"results":"38","hashOfConfig":"29"},{"size":1123,"mtime":1612371461487,"results":"39","hashOfConfig":"29"},{"size":71,"mtime":1612428803558,"results":"40","hashOfConfig":"29"},{"size":581,"mtime":1612698099440,"results":"41","hashOfConfig":"29"},{"size":1456,"mtime":1612593291357,"results":"42","hashOfConfig":"29"},{"size":11526,"mtime":1612637973184,"results":"43","hashOfConfig":"29"},{"size":3538,"mtime":1612627844915,"results":"44","hashOfConfig":"29"},{"size":1130,"mtime":1612510738011,"results":"45","hashOfConfig":"29"},{"size":1581,"mtime":1612617362281,"results":"46","hashOfConfig":"29"},{"size":939,"mtime":1612493884862,"results":"47","hashOfConfig":"29"},{"size":1512,"mtime":1612635178119,"results":"48","hashOfConfig":"29"},{"size":2476,"mtime":1612667247519,"results":"49","hashOfConfig":"29"},{"size":501,"mtime":1612605872823,"results":"50","hashOfConfig":"29"},{"size":9141,"mtime":1612641173159,"results":"51","hashOfConfig":"29"},{"size":3102,"mtime":1561947579848,"results":"52","hashOfConfig":"29"},{"size":3077,"mtime":1612690910910,"results":"53","hashOfConfig":"29"},{"size":3236,"mtime":1612688724094,"results":"54","hashOfConfig":"29"},{"size":447,"mtime":1612697454126,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"10zijn8",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\index.js",[],["121","122"],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\App.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\routes\\HomeTab.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Map\\index.js",["123"],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport NavHeader from \"../../components/NavHeader\";\r\nimport { getCurrentCity } from \"../../utils\";\r\nimport styles from \"./index.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport BASE_URL from \"../../utils/url\";\r\nimport HouseItems from \"../../components/HouseItems\";\r\nasync function getCity() {\r\n  const res = await getCurrentCity();\r\n  return { label: res[0].label, value: res[0].value };\r\n}\r\n\r\nexport default class Map extends React.PureComponent {\r\n  state = {\r\n    houseList: [], //小区下的房源列表\r\n    isShowList: false, //是否展示房源列表\r\n  };\r\n  async componentDidMount() {\r\n    this.initMap();\r\n  }\r\n\r\n  //获取覆盖物的信息\r\n  getRenderInfo = async (id) => {\r\n    const { data } = await axios.get(\"http://localhost:8080/area/map\", {\r\n      params: { id },\r\n    });\r\n\r\n    return data.body;\r\n  };\r\n\r\n  //获取缩放级别和类型\r\n  getTypeAndZoom = () => {\r\n    //获取当前缩放级别\r\n    const zoom = this.map.getZoom();\r\n    //nextZoom表示下一次的缩放级别\r\n    let nextZoom;\r\n    //type表示绘制什么样的覆盖物\r\n    let nextType;\r\n    if (zoom < 12 && zoom >= 10) {\r\n      nextZoom = 13;\r\n      nextType = \"circle\";\r\n    } else if (zoom >= 12 && zoom < 14) {\r\n      nextZoom = 15;\r\n      nextType = \"rect\";\r\n    }\r\n\r\n    return {\r\n      nextType,\r\n      nextZoom,\r\n    };\r\n  };\r\n\r\n  renderHouseMap = (label, data, zoomSize, type, mypoint) => {\r\n    this.myGeo.getPoint(\r\n      label,\r\n      (point) => {\r\n        if (mypoint) {\r\n          point = mypoint;\r\n        }\r\n        this.map.centerAndZoom(point, zoomSize);\r\n        data.forEach(async (item) => {\r\n          // console.log(item)\r\n          // console.log(zoomSize);\r\n          await this.createOverlay(item, zoomSize, type);\r\n        });\r\n      },\r\n      label\r\n    );\r\n  };\r\n\r\n  createCircle = ({ label, value, count, opts, zoom }) => {\r\n    const labelStyle = {\r\n      cursor: \"pointer\",\r\n      border: \"0px solid rgb(255,0,0)\",\r\n      padding: \"0px\",\r\n      whiteSpace: \"nowrap\",\r\n      fontSize: \"12px\",\r\n      color: \"rbg(255,255,255)\",\r\n      textAlign: \"center\",\r\n    };\r\n    //添加文本 React中需要window\r\n    const content = new window.BMapGL.Label(\"\", opts);\r\n    //设置setContent后 设置的文本内容就无效了\r\n    content.setContent(\r\n      `<div class=\"${styles.bubble}\">\r\n              <p class=\"${styles.name}\">${label}</p>\r\n              <p>${count}套</p>\r\n            </div>`\r\n    );\r\n    content.setStyle(labelStyle);\r\n    //绑定了点击事件\r\n    content.addEventListener(\"click\", async () => {\r\n      const res = await this.getRenderInfo(value);\r\n      this.map.centerAndZoom(opts.position, zoom);\r\n      const { nextType, nextZoom } = this.getTypeAndZoom();\r\n      // console.log(\"zoom---\" + zoom + \"nextZoom----\" + nextZoom);\r\n      //清除当前覆盖物信息\r\n      //解决百度地图JS文件自身报错的问题\r\n      //setTimeout(map.clearOverlays(), 0);\r\n      //要重新调用方法\r\n      // console.log(res);\r\n      // console.log(nextType);\r\n      this.renderHouseMap(label, res, nextZoom, nextType, opts.position);\r\n      this.map.clearOverlays();\r\n    });\r\n    this.map.addOverlay(content);\r\n  };\r\n\r\n  getPurchaseList = async (key) => {\r\n    const { data } = await axios.get(\"http://localhost:8080/houses\", {\r\n      params: { cityId: key },\r\n    });\r\n\r\n    // console.log(data.body);\r\n    this.setState({\r\n      houseList: data.body.list,\r\n    });\r\n    return data;\r\n  };\r\n\r\n  createRect = ({ label, value, count, opts }) => {\r\n    // console.log(label);\r\n    // console.log(\"create-rect\");\r\n    const labelStyle = {\r\n      cursor: \"pointer\",\r\n      border: \"0px solid rgb(255,0,0)\",\r\n      padding: \"0px\",\r\n      whiteSpace: \"nowrap\",\r\n      fontSize: \"12px\",\r\n      color: \"rbg(255,255,255)\",\r\n      textAlign: \"center\",\r\n    };\r\n    //添加文本 React中需要window\r\n    const content = new window.BMapGL.Label(\"\", opts);\r\n    //设置setContent后 设置的文本内容就无效了\r\n    content.setContent(\r\n      `<div class=\"${styles.rect}\">\r\n        <span class=\"${styles.housename}\">${label}</span>\r\n        <span class=\"${styles.housenum}\">${count}套</span>\r\n        <i class=\"${styles.arrow}\"></i>\r\n      </div>`\r\n    );\r\n    content.setStyle(labelStyle);\r\n    //绑定了点击事件\r\n    content.addEventListener(\"click\", async ({ domEvent }) => {\r\n      //获取房源列表和数据\r\n      await this.getPurchaseList(value);\r\n\r\n      //计算公式\r\n      const target = domEvent.changedTouches[0];\r\n      //移动target\r\n      this.map.panBy(\r\n        window.innerWidth / 2 - target.clientX,\r\n        (window.innerHeight - 330) / 2 - target.clientY\r\n      );\r\n\r\n      this.setState({\r\n        isShowList: true,\r\n      });\r\n    });\r\n    this.map.addOverlay(content);\r\n  };\r\n\r\n  createOverlay = (data, zoom, type) => {\r\n    const { label, value, coord, count } = data;\r\n    let { longitude, latitude } = coord;\r\n    const point = new window.BMapGL.Point(longitude, latitude);\r\n\r\n    //zoom<15 因为会发现type是circle但是zoom是15\r\n    if (type === \"circle\" && zoom < 15) {\r\n      const opts = {\r\n        position: point,\r\n        offset: new window.BMapGL.Size(-35, -35),\r\n      };\r\n      this.createCircle({ label, value, count, opts, zoom });\r\n    } else {\r\n      //不需要传递zoom\r\n      const opts = {\r\n        position: point,\r\n        offset: new window.BMapGL.Size(-50, -28),\r\n      };\r\n      this.createRect({ label, value, count, opts });\r\n    }\r\n  };\r\n\r\n  async initMap() {\r\n    //获取城市\r\n    const { label, value } = await getCity();\r\n    //获取数据\r\n    const res = await this.getRenderInfo(value);\r\n\r\n    // 初始化地图\r\n    const map = new window.BMapGL.Map(\"container\");\r\n    //挂载map为全局对象 防止传参\r\n    this.map = map;\r\n\r\n    //地址解析\r\n    const myGeo = new window.BMapGL.Geocoder();\r\n    //挂载地址解析器为类的对象\r\n    this.myGeo = myGeo;\r\n    //初始放大倍数\r\n    const zoomSize = 10;\r\n\r\n    //调用回调函数渲染地图和覆盖物即可\r\n    this.renderHouseMap(label, res, zoomSize, \"circle\");\r\n\r\n    //添加缩放的控件\r\n    //添加比例尺控件\r\n    map.addControl(new window.BMapGL.ZoomControl());\r\n    map.addControl(new window.BMapGL.ScaleControl());\r\n\r\n    //绑定移动事件 移动的时候就不展示下方的栏\r\n    map.addEventListener(\"movestart\", (e) => {\r\n      const { isShowList } = this.state;\r\n      if (isShowList === true) {\r\n        this.setState({\r\n          isShowList: false,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  renderHouseBottom = () => {};\r\n  render() {\r\n    return (\r\n      <div className={styles.map}>\r\n        <NavHeader>地图找房</NavHeader>\r\n        <div id=\"container\" className={styles.container}></div>\r\n        {/* 房源列表的渲染 */}\r\n        <div\r\n          className={[\r\n            styles.houseList,\r\n            this.state.isShowList ? styles.show : \"\",\r\n          ].join(\" \")}\r\n        >\r\n          <div className={styles.titleWrap}>\r\n            <h1 className={styles.listTitle}>房屋列表</h1>\r\n            <Link className={styles.titleMore} to=\"/house/list\">\r\n              更多房源\r\n            </Link>\r\n          </div>\r\n          <div className={styles.houseItems}>\r\n            {this.state.houseList.map((item) => {\r\n              return (\r\n                <HouseItems\r\n                  houseImg={item.houseImg}\r\n                  tags={item.tags}\r\n                  title={item.title}\r\n                  desc={item.desc}\r\n                  price={item.price}\r\n                ></HouseItems>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\CityList\\index.js",["124","125","126","127","128","129"],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Profile\\index.js",["130"],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\News\\index.js",["131","132"],"import React from \"react\";\r\nimport { Flex, Carousel, Grid, WingBlank } from \"antd-mobile\";\r\nimport request from \"../../utils/request\";\r\nexport default class News extends React.PureComponent {\r\n  state = {\r\n    news: [],\r\n  };\r\n  async getNews() {\r\n    const cityVal = localStorage.getItem(\"hkzf_city\")[0].value;\r\n    const data = await request.get(\"/home/news\", {\r\n      params: { area: cityVal },\r\n    });\r\n\r\n    this.setState(() => {\r\n      return {\r\n        news: data,\r\n      };\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.getNews();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"news\">\r\n        <h3 className=\"group-title\">最新资讯</h3>\r\n        <WingBlank size=\"md\">\r\n          {this.state.news.map((item) => {\r\n            return (\r\n              <div className=\"news-item\" key={item.id}>\r\n                <div className=\"imgwrap\">\r\n                  <img\r\n                    className=\"img\"\r\n                    src={`http://localhost:8080${item.imgSrc}`}\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <Flex className=\"content\" direction=\"column\" justify=\"between\">\r\n                  <h3 className=\"title\">{item.title}</h3>\r\n                  <Flex className=\"info\" justify=\"between\">\r\n                    <span>{item.from}</span>\r\n                    <span>{item.date}</span>\r\n                  </Flex>\r\n                </Flex>\r\n              </div>\r\n            );\r\n          })}\r\n        </WingBlank>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\index.js",["133"],"import { Flex, Toast } from \"antd-mobile\";\r\nimport React, { createRef } from \"react\";\r\nimport SearchHeader from \"../../components/SearchHeader\";\r\nimport { getCurrentCity } from \"../../utils\";\r\nimport HouseItems from \"../../components/HouseItems\";\r\nimport styles from \"./index.module.css\";\r\nimport Filter from \"./components/Filter\";\r\nimport request from \"../../utils/request\";\r\nimport NoHouse from \"../../components/NoHouse\";\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  WindowScroller,\r\n  InfiniteLoader,\r\n} from \"react-virtualized\";\r\nimport Sticky from \"../../components/Sticky\";\r\nexport default class HouseList extends React.PureComponent {\r\n  state = {\r\n    city: \"\",\r\n    list: [],\r\n    count: 0,\r\n    //初始化数据 挂载到整个类上\r\n    filters: {},\r\n  };\r\n\r\n  sticky = createRef();\r\n\r\n  getCity = async () => {\r\n    const result = await getCurrentCity();\r\n    return result[0].label;\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    const city = await this.getCity();\r\n    this.setState({\r\n      city,\r\n    });\r\n\r\n    //进入页面时就要获取数据并且展示数据\r\n    await this.showHouse();\r\n    this.sticky.current.handleListPadding();\r\n  };\r\n\r\n  showHouse = async () => {\r\n    const data = await this.searchHouseList();\r\n\r\n    const { list, count } = data;\r\n\r\n    this.setState((state) => {\r\n      if (count !== 0) {\r\n        //加载提示\r\n        Toast.info(`共找到${count}条房源`, 1, null, true);\r\n      }\r\n      return {\r\n        list,\r\n        count,\r\n      };\r\n    });\r\n  };\r\n\r\n  onFilters = async (filters) => {\r\n    console.log(\"filter update\");\r\n    //封装为一个全局变量\r\n    await this.setState({\r\n      filters,\r\n    });\r\n    //展示房屋\r\n    console.log(this.state.filters);\r\n    window.scrollTo(0, 0);\r\n    await this.showHouse();\r\n  };\r\n\r\n  searchHouseList = async () => {\r\n    //通过HouseList搜索\r\n    const res = await getCurrentCity();\r\n    const value = res[0].value;\r\n    const { filters } = this.state;\r\n    // debugger;\r\n    const data = await request.get(\"/houses\", {\r\n      params: {\r\n        cityId: value,\r\n        ...filters,\r\n        start: 1,\r\n        end: 20,\r\n      },\r\n    });\r\n\r\n    return data;\r\n  };\r\n\r\n  isRowLoaded = ({ index }) => {\r\n    //判断列表中的每一行是否加载完成\r\n    return this.state.list[index];\r\n  };\r\n\r\n  loadMoreRows = async ({ startIndex, stopIndex }) => {\r\n    const res = await getCurrentCity();\r\n    const cityId = res[0].value;\r\n    return new Promise((resolve, reject) => {\r\n      const { filters } = this.state;\r\n      request\r\n        .get(\"/houses\", {\r\n          params: {\r\n            cityId,\r\n            ...filters,\r\n            start: startIndex,\r\n            end: startIndex + 20,\r\n          },\r\n        })\r\n        .then(async (res) => {\r\n          const data = res;\r\n          const newList = [...this.state.list, ...data.list];\r\n          await this.setState({\r\n            list: newList,\r\n          });\r\n          resolve();\r\n        });\r\n    });\r\n  };\r\n\r\n  renderNoHouse = () => {\r\n    if (request.isLoading === false && this.state.count === 0) {\r\n      return <NoHouse>没有找到房源 请您换个搜索条件吧~</NoHouse>;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  rowRender = ({\r\n    key, // Unique key within array of rows\r\n    index, // 索引号\r\n    style, // 样式 指定每一行在哪个位置\r\n  }) => {\r\n    const { list } = this.state;\r\n    const house = list[index];\r\n    if (house) {\r\n      return (\r\n        <HouseItems\r\n          key={key}\r\n          style={style}\r\n          houseImg={house.houseImg}\r\n          desc={house.desc}\r\n          title={house.title}\r\n          price={house.price}\r\n          houseCode={house.houseCode}\r\n          tags={house.tags}\r\n        ></HouseItems>\r\n      );\r\n    }\r\n    //渲染一个占位符\r\n    else {\r\n      <div key={key} style={style}>\r\n        <p className={styles.loadingHolder}></p>\r\n      </div>;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.house_list}>\r\n        <Flex className={styles.header}>\r\n          <i\r\n            className={[\"iconfont\", \"icon-back\", styles.iconback].join(\" \")}\r\n            onClick={() => {\r\n              this.props.history.go(-1);\r\n            }}\r\n          ></i>\r\n          <SearchHeader\r\n            city={this.state.city}\r\n            className={styles.house_search}\r\n            iconColor=\"#00ae66\"\r\n          ></SearchHeader>\r\n        </Flex>\r\n        <Sticky height={40} ref={this.sticky}>\r\n          <Filter onFilter={this.onFilters}></Filter>\r\n        </Sticky>\r\n        <div className={styles.houseItems}>\r\n          {/* InfiniteLoader */}\r\n          {this.renderNoHouse() || (\r\n            <InfiniteLoader\r\n              isRowLoaded={this.isRowLoaded}\r\n              loadMoreRows={this.loadMoreRows}\r\n              rowCount={this.state.count}\r\n            >\r\n              {({ onRowsRendered, registerChild }) => {\r\n                {\r\n                  /* 渲染结构 */\r\n                }\r\n                return (\r\n                  <WindowScroller>\r\n                    {({ height, isScrolling, scrollTop }) => {\r\n                      return (\r\n                        <AutoSizer>\r\n                          {({ width }) => {\r\n                            return (\r\n                              <List\r\n                                autoHeight //这是真正的高度 设置为windowScroller的高度\r\n                                width={width} //视口的高度\r\n                                height={height} //视口的宽度\r\n                                rowCount={this.state.count}\r\n                                rowHeight={120} /**每一行的高度 */\r\n                                rowRenderer={this.rowRender}\r\n                                isScrolling={isScrolling}\r\n                                scrollTop={scrollTop}\r\n                                onRowsRendered={onRowsRendered}\r\n                                ref={registerChild}\r\n                              />\r\n                            );\r\n                          }}\r\n                        </AutoSizer>\r\n                      );\r\n                    }}\r\n                  </WindowScroller>\r\n                );\r\n              }}\r\n            </InfiniteLoader>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Home\\index.js",["134"],"import React from \"react\";\r\nimport { Flex, Carousel, Grid, WingBlank } from \"antd-mobile\";\r\nimport request from \"../../utils/request\";\r\nimport Nav1 from \"../../assets/images/nav-1.png\";\r\nimport Nav2 from \"../../assets/images/nav-2.png\";\r\nimport Nav3 from \"../../assets/images/nav-3.png\";\r\nimport Nav4 from \"../../assets/images/nav-4.png\";\r\nimport \"./index.css\";\r\nimport BASE_URL from \"../../utils/url\";\r\nimport { getCurrentCity } from \"../../utils\";\r\nimport SearchHeader from \"../../components/SearchHeader\";\r\n\r\nconst navItem = [\r\n  { img: Nav1, title: \"整租\" },\r\n  { img: Nav2, title: \"合租\" },\r\n  { img: Nav3, title: \"地图找房\" },\r\n  { img: Nav4, title: \"去出租\" },\r\n];\r\n\r\nexport default class Home extends React.PureComponent {\r\n  state = {\r\n    data: [],\r\n    CarouselDidLoad: false,\r\n    groups: [],\r\n    news: [],\r\n    city: \"上海\",\r\n    cityVal: \"\",\r\n  };\r\n  async getNews() {\r\n    console.log(this.state.cityVal);\r\n    const data = await request.get(\"/home/news\", {\r\n      params: { area: this.state.cityVal },\r\n    });\r\n\r\n    this.setState(() => {\r\n      return {\r\n        news: data,\r\n      };\r\n    });\r\n  }\r\n  async getGroup() {\r\n    const data = await request.get(\"/home/groups\", {\r\n      params: { area: this.state.cityVal },\r\n    });\r\n\r\n    this.setState({\r\n      groups: data,\r\n    });\r\n  }\r\n\r\n  async getData() {\r\n    const data = await request.get(\"/home/swiper\");\r\n\r\n    this.setState({\r\n      data: data,\r\n      CarouselDidLoad: true,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    getCurrentCity().then(async (res) => {\r\n      await this.setState({\r\n        city: res[0].label,\r\n        cityVal: res[0].value,\r\n      });\r\n\r\n      this.getData();\r\n      this.getGroup();\r\n      this.getNews();\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"swiper\">\r\n          {this.state.CarouselDidLoad === true ? (\r\n            <Carousel autoplay={true} infinite autoplayInterval={5000}>\r\n              {this.state.data.map((val) => (\r\n                <img\r\n                  src={BASE_URL + val.imgSrc}\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: \"100%\",\r\n                    verticalAlign: \"top\",\r\n                    height: \"212px\",\r\n                  }}\r\n                  key={val.id}\r\n                />\r\n              ))}\r\n            </Carousel>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <Flex className=\"nav-item\">\r\n          {navItem.map((item) => {\r\n            return (\r\n              <Flex.Item\r\n                key={item.title}\r\n                onClick={() => {\r\n                  this.props.history.push(\"/home/houselist\");\r\n                }}\r\n              >\r\n                <img src={item.img}></img>\r\n                <h3>{item.title}</h3>\r\n              </Flex.Item>\r\n            );\r\n          })}\r\n        </Flex>\r\n\r\n        <div className=\"group\">\r\n          <h3 className=\"group-title\">\r\n            租房小组 <span className=\"more\">更多</span>\r\n          </h3>\r\n          <Grid\r\n            columnNum={2}\r\n            data={this.state.groups}\r\n            square={false}\r\n            hasLine={false}\r\n            renderItem={(item) => {\r\n              return (\r\n                <Flex className=\"group-item\" justify=\"around\">\r\n                  <div className=\"desc\">\r\n                    <p className=\"title\">{item.title}</p>\r\n                    <span className=\"info\">{item.desc}</span>\r\n                  </div>\r\n                  <img src={`http://localhost:8080${item.imgSrc}`} alt=\"\" />\r\n                </Flex>\r\n              );\r\n            }}\r\n          ></Grid>\r\n        </div>\r\n        <div className=\"news\">\r\n          <h3 className=\"group-title\">最新资讯</h3>\r\n          <WingBlank size=\"md\">\r\n            {this.state.news.map((item) => {\r\n              return (\r\n                <div className=\"news-item\" key={item.id}>\r\n                  <div className=\"imgwrap\">\r\n                    <img\r\n                      className=\"img\"\r\n                      src={`http://localhost:8080${item.imgSrc}`}\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                  <Flex\r\n                    className=\"content\"\r\n                    direction=\"column\"\r\n                    justify=\"between\"\r\n                  >\r\n                    <h3 className=\"title\">{item.title}</h3>\r\n                    <Flex className=\"info\" justify=\"between\">\r\n                      <span>{item.from}</span>\r\n                      <span>{item.date}</span>\r\n                    </Flex>\r\n                  </Flex>\r\n                </div>\r\n              );\r\n            })}\r\n          </WingBlank>\r\n        </div>\r\n        <SearchHeader city={this.state.city}></SearchHeader>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\NavHeader\\index.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\index.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\url.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\request.js",["135"],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\SearchHeader\\index.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\Filter\\index.js",["136"],"import React, { Component } from \"react\";\r\n\r\nimport FilterTitle from \"../FilterTitle\";\r\nimport FilterPicker from \"../FilterPicker\";\r\nimport FilterMore from \"../FilterMore\";\r\nimport request from \"../../../../utils/request\";\r\nimport styles from \"./index.module.css\";\r\nimport { getCurrentCity } from \"../../../../utils\";\r\nimport { isEqual } from \"lodash\";\r\nimport { Spring } from \"react-spring/renderprops\";\r\nconst titleSelectedStatus = {\r\n  area: false,\r\n  mode: false,\r\n  price: false,\r\n  more: false,\r\n};\r\n\r\nconst defaultValues = {\r\n  area: [\"area\", \"null\"],\r\n  mode: [\"null\"],\r\n  price: [\"null\"],\r\n  more: [],\r\n};\r\nexport default class Filter extends Component {\r\n  state = {\r\n    titleSelectedStatus,\r\n    openType: \"\",\r\n    filterObj: {},\r\n    selectedValues: {},\r\n  };\r\n  //隐藏对话框\r\n  onCancel = async (type, moreupdateflag) => {\r\n    //Cancel的时候\r\n    //type正确 但是要拿到selectedObj\r\n    //逻辑 点了取消以后 我们要返回其上一次的状态 而不是和确定一样\r\n    this.htmlbody.classList.remove(\"body-fixed\");\r\n    const { selectedValues } = this.state;\r\n    let selectedObj = {};\r\n    //点击取消和清除是不同的\r\n    //取消指的是返回上一次的状态\r\n    //清除指的是全都没了\r\n    if (type === \"more\") {\r\n      selectedObj = selectedValues[type];\r\n      //数据没有变化并且两次都是0 意味着不用改变 反过来就是需要改变\r\n      if (moreupdateflag) {\r\n        //清除more数组\r\n        const newselectedValues = { ...selectedValues, more: [] };\r\n        await this.setState({ selectedValues: newselectedValues });\r\n        //强制刷新数据\r\n        this.props.onFilter(this.filterForData(this.state.selectedValues));\r\n      }\r\n    } else {\r\n      //其他情况应该返回上一次的状态 具体来说就是不改变原有的selectedValues;\r\n      console.log(\"非more的情况\");\r\n      console.log(selectedValues);\r\n      selectedObj = selectedValues;\r\n    }\r\n    const newTitledSelectedStatus = this.checkIfHighLight(selectedObj, type);\r\n    this.setState({\r\n      openType: \"\",\r\n      titleSelectedStatus: newTitledSelectedStatus,\r\n    });\r\n  };\r\n\r\n  //辅助方法 判断是否应该高亮\r\n  checkIfHighLight = (selectedObj, type) => {\r\n    console.log(selectedObj);\r\n    console.log(\"type---\" + type);\r\n    const { titleSelectedStatus } = this.state;\r\n    const newTitledSelectedStatus = { ...titleSelectedStatus };\r\n    if (type !== \"more\") {\r\n      const selectVal = selectedObj[type];\r\n      if (\r\n        type === \"area\" &&\r\n        (selectVal.length !== 2 || selectVal[0] !== \"area\")\r\n      ) {\r\n        //选的是第一个区域\r\n        newTitledSelectedStatus[type] = true;\r\n      } else if (type === \"mode\" && selectVal[0] !== \"null\") {\r\n        newTitledSelectedStatus[type] = true;\r\n      } else if (type === \"price\" && selectVal[0] !== \"null\") {\r\n        newTitledSelectedStatus[type] = true;\r\n      } else {\r\n        //不做处理\r\n        newTitledSelectedStatus[type] = false;\r\n      }\r\n    } else if (type === \"more\") {\r\n      if (selectedObj.length > 0) {\r\n        //filterMore组件的处理\r\n        newTitledSelectedStatus[type] = true;\r\n      } else {\r\n        newTitledSelectedStatus[type] = false;\r\n      }\r\n    }\r\n    return newTitledSelectedStatus;\r\n  };\r\n\r\n  //保存内容\r\n  onSave = async (selectedObj, type) => {\r\n    // console.log(selectedObj);\r\n    this.htmlbody.classList.remove(\"body-fixed\");\r\n    const newTitledSelectedStatus = this.checkIfHighLight(selectedObj, type);\r\n    //selectedObj的type是more 我们就讨论一下\r\n    if (type === \"more\") {\r\n      //比较的是more下的数据有无更改 使用lodash\r\n      const isequal = isEqual(this.state.selectedValues.more, selectedObj);\r\n      if (isequal) {\r\n        //一样 意味着不需要更新\r\n        this.setState({\r\n          openType: \"\",\r\n        });\r\n        return;\r\n      }\r\n    } else {\r\n      const isequal = isEqual(this.state.selectedValues, selectedObj);\r\n      if (isequal) {\r\n        //一样 意味着不用更新\r\n        this.setState({\r\n          openType: \"\",\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    //使用await使得setState的异步回调变成同步 失了智\r\n    await this.setState((state) => {\r\n      const { selectedValues } = state;\r\n      if (type === \"more\") {\r\n        //比较一下和上次有没有不同\r\n        const newSelectedValues = { ...selectedValues, [type]: selectedObj };\r\n        // console.log(\"newSelectedValues===\");\r\n        // console.log(newSelectedValues);\r\n        return {\r\n          openType: \"\",\r\n          selectedValues: newSelectedValues,\r\n          titleSelectedStatus: newTitledSelectedStatus,\r\n        };\r\n      } else {\r\n        return {\r\n          openType: \"\",\r\n          selectedValues: selectedObj,\r\n          titleSelectedStatus: newTitledSelectedStatus,\r\n        };\r\n      }\r\n    });\r\n\r\n    //保存后就获取当前所有的数据\r\n    const filterOrigin = { ...this.state.selectedValues };\r\n    const reqdata = this.filterForData(filterOrigin);\r\n\r\n    // console.log(reqdata);\r\n    // debugger;\r\n    // 传递给父组件 获取数据\r\n    this.props.onFilter(reqdata);\r\n    //筛选数据并获取\r\n  };\r\n\r\n  filterForData = (filterOrigin) => {\r\n    const databag = {};\r\n    const { area, mode, price, more } = filterOrigin;\r\n    const areakey = area[0];\r\n    let areaValue = \"\";\r\n    if (area.length === 3) {\r\n      area[2] === \"null\" ? (areaValue = area[1]) : (areaValue = area[2]);\r\n    }\r\n    databag[areakey] = areaValue;\r\n\r\n    //方式和租金可以直接拿第一项 因为它只有一项\r\n    databag[\"rentType\"] = mode[0];\r\n    //这里就取一个数字\r\n    const price_num = price[0].substring(6);\r\n    databag[\"price\"] = price_num;\r\n    //更多是一个字符串 我们要用逗号分割 但它是一整个字符串\r\n    databag[\"more\"] = more.join(\",\");\r\n\r\n    // debugger;\r\n\r\n    return databag;\r\n  };\r\n\r\n  //方法\r\n  handleClick = (type) => {\r\n    //使得点击遮罩外不能滑动\r\n    this.htmlbody.classList.add(\"body-fixed\");\r\n\r\n    const { selectedValues, titleSelectedStatus } = this.state;\r\n    //创建新的标题选中状态对象\r\n    const newTitledSelectedStatus = { ...titleSelectedStatus };\r\n    //遍历标题选中状态对象\r\n    // console.log(selectedValues);\r\n    Object.keys(titleSelectedStatus).forEach((key) => {\r\n      if (key === type) {\r\n        //这是当前标题 让它高亮\r\n        newTitledSelectedStatus[key] = true;\r\n      } else {\r\n        const selectVal = selectedValues[key];\r\n        // console.log(\"selectVal:\" + selectVal + \"---key:\" + key);\r\n        // console.log(selectVal);\r\n        if (\r\n          key === \"area\" &&\r\n          (selectVal.length !== 2 || selectVal[0] !== \"area\")\r\n        ) {\r\n          //选的是第一个区域\r\n          newTitledSelectedStatus[key] = true;\r\n        } else if (key === \"mode\" && selectVal[0] !== \"null\") {\r\n          newTitledSelectedStatus[key] = true;\r\n        } else if (key === \"price\" && selectVal[0] !== \"null\") {\r\n          newTitledSelectedStatus[key] = true;\r\n        } else if (key === \"more\" && selectVal.length > 0) {\r\n          //filterMore组件的处理\r\n          newTitledSelectedStatus[key] = true;\r\n        } else {\r\n          //不做处理\r\n          newTitledSelectedStatus[key] = false;\r\n        }\r\n      }\r\n    });\r\n    // console.log(newTitledSelectedStatus);\r\n    this.setState((state) => {\r\n      return {\r\n        titleSelectedStatus: newTitledSelectedStatus,\r\n        openType: type,\r\n      };\r\n    });\r\n\r\n    // console.log(this.state.titleSelectedStatus);\r\n  };\r\n\r\n  shouldShowMask = () => {\r\n    const { openType } = this.state;\r\n    return openType === \"mode\" || openType === \"area\" || openType === \"price\";\r\n  };\r\n\r\n  changeFilterPickerSelected = (newSelectedValue) => {\r\n    this.setState({\r\n      selectedValues: newSelectedValue,\r\n    });\r\n  };\r\n\r\n  changeFilterMoreSelected = (newSelected) => {\r\n    const { selectedValues } = this.state;\r\n    const newSelectedValues = { ...selectedValues, more: newSelected };\r\n    this.setState({\r\n      selectedValues: newSelectedValues,\r\n    });\r\n  };\r\n\r\n  renderFilterPicker = () => {\r\n    const shouldshow = this.shouldShowMask();\r\n    if (!shouldshow) {\r\n      return null;\r\n    } else {\r\n      let data = [];\r\n      const { openType, filterObj } = this.state;\r\n      let cols = 3;\r\n      let defaultValue = this.state.selectedValues;\r\n      // console.log(\"default-value----\" + defaultValue);\r\n      switch (openType) {\r\n        case \"area\":\r\n          const { area, subway } = filterObj;\r\n          data = [area, subway];\r\n          cols = 3;\r\n          break;\r\n        case \"mode\":\r\n          const { rentType } = filterObj;\r\n          // console.log(rentType);\r\n          data = rentType;\r\n          cols = 1;\r\n          break;\r\n        case \"price\":\r\n          const { price } = filterObj;\r\n          data = price;\r\n          cols = 1;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      //这里要传过去所有的值\r\n      return (\r\n        <FilterPicker\r\n          onCancel={this.onCancel}\r\n          onSave={this.onSave}\r\n          data={data}\r\n          cols={cols}\r\n          type={this.state.openType}\r\n          defaultValue={defaultValue}\r\n          changeSelected={this.changeFilterPickerSelected}\r\n        ></FilterPicker>\r\n      );\r\n    }\r\n  };\r\n\r\n  renderMask = () => {\r\n    return this.shouldShowMask() ? (\r\n      <Spring to={{ opacity: 1 }} from={{ opacity: 0 }}>\r\n        {(props) => {\r\n          return (\r\n            <div\r\n              style={props}\r\n              className={styles.mask}\r\n              onClick={() => {\r\n                this.onCancel(this.state.openType);\r\n              }}\r\n            ></div>\r\n          );\r\n        }}\r\n      </Spring>\r\n    ) : (\r\n      \"\"\r\n    );\r\n  };\r\n\r\n  getFilterData = async () => {\r\n    const res = await getCurrentCity();\r\n    const value = res[0].value;\r\n    const data = await request.get(\"/houses/condition\", {\r\n      params: { id: value },\r\n    });\r\n\r\n    this.setState({\r\n      filterObj: data,\r\n    });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.getFilterData();\r\n    this.setState({\r\n      selectedValues: defaultValues,\r\n    });\r\n\r\n    //拿到body\r\n    this.htmlbody = document.body;\r\n    //更改padding值\r\n  }\r\n\r\n  renderFilterMore = () => {\r\n    const { openType, filterObj } = this.state;\r\n    if (openType !== \"more\") {\r\n      return;\r\n    } else {\r\n      const { roomType, oriented, floor, characteristic } = filterObj;\r\n      const data = { roomType, oriented, floor, characteristic };\r\n      const defaultValue = this.state.selectedValues.more;\r\n      // debugger;\r\n      return (\r\n        <FilterMore\r\n          data={data}\r\n          onSave={this.onSave}\r\n          type={openType}\r\n          defaultValue={defaultValue}\r\n          onleave={this.onCancel}\r\n          changeSelected={this.changeFilterMoreSelected}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 遮罩层 */}\r\n        {this.renderMask()}\r\n        <div className={styles.content}>\r\n          {/* 标题栏 */}\r\n          <FilterTitle\r\n            titleSelectedStatus={this.state.titleSelectedStatus}\r\n            handleClick={this.handleClick}\r\n          />\r\n\r\n          {/* 前三个菜单对应的内容： */}\r\n          {this.renderFilterPicker()}\r\n\r\n          {/* 最后一个菜单对应的内容： */}\r\n          {this.renderFilterMore()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\FilterMore\\index.js",["137"],"import React, { Component } from \"react\";\r\n\r\nimport FilterFooter from \"../../../../components/FilterFooter\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nexport default class FilterMore extends Component {\r\n  //在state中设置默认的defaultValue\r\n  state = {\r\n    selectedValue: this.props.defaultValue,\r\n  };\r\n  // 渲染标签\r\n  renderFilters(data) {\r\n    // 高亮类名： styles.tagActive\r\n    return data.map((item) => {\r\n      const { selectedValue } = this.state;\r\n      const isClicked = selectedValue.indexOf(item.value) > -1;\r\n      return (\r\n        <span\r\n          className={[styles.tag, isClicked ? styles.tagActive : \"\"].join(\" \")}\r\n          key={item.value}\r\n          onClick={() => {\r\n            this.onTagClick(item.value);\r\n          }}\r\n        >\r\n          {item.label}\r\n        </span>\r\n      );\r\n    });\r\n  }\r\n\r\n  //多个on-off的switch开关处理办法\r\n  onTagClick = (value) => {\r\n    const { selectedValue } = this.state;\r\n    const newselectedValue = [...selectedValue];\r\n    //没有当前项\r\n    if (selectedValue.indexOf(value) == -1) {\r\n      newselectedValue.push(value);\r\n    } else {\r\n      //有当前项 就删除数组中的这一项元素\r\n      const index = newselectedValue.findIndex((item) => item === value);\r\n      //splice的删除方法\r\n      newselectedValue.splice(index, 1);\r\n    }\r\n    //更新状态\r\n    this.setState({\r\n      selectedValue: newselectedValue,\r\n    });\r\n  };\r\n\r\n  //确定按钮的事件处理程序\r\n  onOk = () => {\r\n    //从props中取出内容\r\n    const { type, onSave } = this.props;\r\n    onSave(this.state.selectedValue, type);\r\n  };\r\n\r\n  render() {\r\n    const { roomType, oriented, floor, characteristic } = this.props.data;\r\n    const { onleave, type, changeSelected } = this.props;\r\n    // console.log(onleave);\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 遮罩层 */}\r\n        <div\r\n          className={styles.mask}\r\n          onClick={() => {\r\n            onleave(type);\r\n          }}\r\n        />\r\n\r\n        {/* 条件内容 */}\r\n        <div className={styles.tags}>\r\n          <dl className={styles.dl}>\r\n            <dt className={styles.dt}>户型</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(roomType)}</dd>\r\n\r\n            <dt className={styles.dt}>朝向</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(oriented)}</dd>\r\n\r\n            <dt className={styles.dt}>楼层</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(floor)}</dd>\r\n\r\n            <dt className={styles.dt}>房屋亮点</dt>\r\n            <dd className={styles.dd}>{this.renderFilters(characteristic)}</dd>\r\n          </dl>\r\n        </div>\r\n\r\n        {/* 底部按钮 */}\r\n        <FilterFooter\r\n          className={styles.footer}\r\n          cancelText=\"清除\"\r\n          onCancel={async () => {\r\n            let flag = true;\r\n            //判断一下当前的selectedValue是否为空\r\n            if (this.state.selectedValue.length === 0) {\r\n              //其实不需要更新了,传回一个false;\r\n              flag = false;\r\n            }\r\n            //把type写死 因为只有这一个 需要更改的是父组件内more的状态 否则没有用\r\n            this.setState({ selectedValue: [] });\r\n            ////...需要改变父级状态 否则高亮没有效果\r\n            await changeSelected([]);\r\n\r\n            //这里的onCancel的名字叫做onleave\r\n            onleave(type, flag);\r\n          }}\r\n          onOk={this.onOk}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\FilterTitle\\index.js",["138"],"import React from \"react\";\r\n\r\nimport { Flex } from \"antd-mobile\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./index.module.css\";\r\n\r\n// 条件筛选栏标题数组：\r\nconst titleList = [\r\n  { title: \"区域\", type: \"area\" },\r\n  { title: \"方式\", type: \"mode\" },\r\n  { title: \"租金\", type: \"price\" },\r\n  { title: \"筛选\", type: \"more\" },\r\n];\r\n\r\nexport default function FilterTitle({ titleSelectedStatus, handleClick }) {\r\n  return (\r\n    <Flex align=\"center\" className={styles.root}>\r\n      {titleList.map((item) => {\r\n        return (\r\n          <Flex.Item\r\n            key={item.type}\r\n            onClick={() => {\r\n              handleClick(item.type);\r\n            }}\r\n          >\r\n            {/* 选中类名： selected */}\r\n            <span\r\n              className={[\r\n                styles.dropdown,\r\n                titleSelectedStatus[item.type] ? styles.selected : \"\",\r\n              ].join(\" \")}\r\n            >\r\n              <span>{item.title}</span>\r\n              <i className=\"iconfont icon-arrow\" />\r\n            </span>\r\n          </Flex.Item>\r\n        );\r\n      })}\r\n    </Flex>\r\n  );\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseList\\components\\FilterPicker\\index.js",["139"],"import React, { Component } from \"react\";\r\n\r\nimport { PickerView } from \"antd-mobile\";\r\n\r\nimport FilterFooter from \"../../../../components/FilterFooter\";\r\n\r\nexport default class FilterPicker extends Component {\r\n  state = {\r\n    value: \"\",\r\n    selectedValue: {},\r\n  };\r\n  componentDidMount() {\r\n    const { defaultValue, type } = this.props;\r\n    // console.log(defaultValue);\r\n    this.setState({\r\n      selectedValue: defaultValue,\r\n      value: defaultValue[type],\r\n    });\r\n\r\n    console.log(\"picker create\");\r\n  }\r\n  render() {\r\n    const {\r\n      onCancel,\r\n      onSave,\r\n      data,\r\n      cols,\r\n      type,\r\n      defaultValue,\r\n      changeSelected,\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        {/* 选择器组件： */}\r\n        <PickerView\r\n          data={data}\r\n          value={this.state.value}\r\n          cols={cols}\r\n          onChange={(newvalue) => {\r\n            this.setState((state, props) => {\r\n              const newSelected = { ...defaultValue, [type]: newvalue };\r\n              // //把这个东西给changeSelected\r\n              // changeSelected(newSelected);\r\n              return {\r\n                value: newvalue,\r\n                selectedValue: newSelected,\r\n              };\r\n            });\r\n          }}\r\n        />\r\n\r\n        {/* 底部按钮 */}\r\n        <FilterFooter\r\n          onCancel={() => {\r\n            onCancel(type);\r\n          }}\r\n          onOk={() => {\r\n            // console.log(this.state.selectedValue)\r\n            onSave(this.state.selectedValue, type);\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\FilterFooter\\index.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\HouseItems\\index.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\Sticky\\index.js",["140"],"import React, { createRef } from \"react\";\r\nimport styles from \"./index.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nexport default class Sticky extends React.PureComponent {\r\n  placeholder = createRef();\r\n  content = createRef();\r\n  //监听浏览器的scroll事件\r\n  handleScroll = () => {\r\n    const placeholderEL = this.placeholder.current;\r\n    const contentEL = this.content.current;\r\n    // console.log(placeholder);\r\n    // console.log(content);\r\n    //有时候可能会报错 因为滑的太快了\r\n    if (!placeholderEL || !contentEL) {\r\n      return;\r\n    }\r\n    //dom对象的方法 DOM对象找到距离顶部的top值 和scroll被卷起的头部是不同的\r\n    const rectObj = placeholderEL.getBoundingClientRect();\r\n    //console.log(rectObj);\r\n    if (rectObj.top <= 0) {\r\n      contentEL.classList.add(styles.sticky);\r\n      //占位 但是被z-index为1的覆盖\r\n      //根据props传递过来height\r\n      placeholderEL.style.height = this.props.height + \"px\";\r\n      if (this.virtual_list) {\r\n        this.virtual_list.classList.remove(styles.ptlist);\r\n      }\r\n    } else {\r\n      //不吸顶\r\n      contentEL.classList.remove(styles.sticky);\r\n      //占位 但是被z-index为1的覆盖\r\n      placeholderEL.style.height = \"0px\";\r\n      if (this.virtual_list) {\r\n        this.virtual_list.classList.add(styles.ptlist);\r\n      }\r\n    }\r\n  };\r\n  componentWillUnmount() {\r\n    //卸载组件的时候 也应该恢复原样\r\n    this.virtual_list.classList.remove(styles.ptlist);\r\n    this.virtual_list.classList.remove(styles.pblist);\r\n  }\r\n  componentDidMount() {\r\n    this.eventid = window.addEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n\r\n  //让父组件来调用这个方法就得了\r\n  handleListPadding = () => {\r\n    //当页面加载完成后 再使用\r\n    this.virtual_list = document.getElementsByClassName(\r\n      \"ReactVirtualized__List\"\r\n    )[0];\r\n\r\n    //一开始没有scroll就要添加样式\r\n    this.virtual_list.classList.add(styles.ptlist);\r\n    this.virtual_list.classList.add(styles.pblist);\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"scroll\", this.eventid);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sticky\">\r\n        {/* 占位符 */}\r\n        <div ref={this.placeholder}></div>\r\n        {/* 内容元素 */}\r\n        <div ref={this.content}>{this.props.children}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSticky.propTypes = {\r\n  height: PropTypes.number.isRequired,\r\n};\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\NoHouse\\index.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\HouseDetail\\index.js",["141"],"import React, { Component } from \"react\";\r\n\r\nimport { Carousel, Flex } from \"antd-mobile\";\r\n\r\nimport NavHeader from \"../../components/NavHeader\";\r\nimport HouseItem from \"../../components/HouseItems\";\r\nimport HousePackage from \"../../components/HousePackage\";\r\n\r\nimport BASE_URL from \"../../utils/url\";\r\nimport request from \"../../utils/request\";\r\nimport styles from \"./index.module.css\";\r\n\r\n// 猜你喜欢\r\nconst recommendHouses = [\r\n  {\r\n    id: 1,\r\n    houseImg: `/img/message/1.png`,\r\n    desc: \"72.32㎡/南 北/低楼层\",\r\n    title: \"安贞西里 3室1厅\",\r\n    price: 4500,\r\n    tags: [\"随时看房\"],\r\n  },\r\n  {\r\n    id: 2,\r\n    houseImg: \"/img/message/2.png\",\r\n    desc: \"83㎡/南/高楼层\",\r\n    title: \"天居园 2室1厅\",\r\n    price: 7200,\r\n    tags: [\"近地铁\"],\r\n  },\r\n  {\r\n    id: 3,\r\n    houseImg: \"/img/message/3.png\",\r\n    desc: \"52㎡/西南/低楼层\",\r\n    title: \"角门甲4号院 1室1厅\",\r\n    price: 4300,\r\n    tags: [\"集中供暖\"],\r\n  },\r\n];\r\n\r\n// 百度地图\r\nconst BMap = window.BMapGL;\r\n\r\nconst labelStyle = {\r\n  position: \"absolute\",\r\n  zIndex: -3,\r\n  backgroundColor: \"rgb(238, 93, 91)\",\r\n  color: \"rgb(255, 255, 255)\",\r\n  height: 25,\r\n  padding: \"5px 10px\",\r\n  lineHeight: \"14px\",\r\n  borderRadius: 3,\r\n  boxShadow: \"rgb(204, 204, 204) 2px 2px 2px\",\r\n  whiteSpace: \"nowrap\",\r\n  fontSize: 12,\r\n  userSelect: \"none\",\r\n};\r\n\r\nexport default class HouseDetail extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    houseInfo: {\r\n      // 房屋图片\r\n      slides: [],\r\n      // 标题\r\n      title: \"\",\r\n      // 标签\r\n      tags: [],\r\n      // 租金\r\n      price: 0,\r\n      // 房型\r\n      roomType: \"两室一厅\",\r\n      // 房屋面积\r\n      size: 89,\r\n      // 装修类型\r\n      renovation: \"精装\",\r\n      // 朝向\r\n      oriented: [],\r\n      // 楼层\r\n      floor: \"\",\r\n      // 小区名称\r\n      community: \"\",\r\n      // 地理位置\r\n      coord: {\r\n        latitude: \"39.928033\",\r\n        longitude: \"116.529466\",\r\n      },\r\n      // 房屋配套\r\n      supporting: [],\r\n      // 房屋标识\r\n      houseCode: \"\",\r\n      // 房屋描述\r\n      description: \"\",\r\n    },\r\n  };\r\n\r\n  getHouseDetail = async () => {\r\n    const { id } = this.props.match.params;\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n    const data = await request.get(`/houses/${id}`);\r\n    //获取轮播图数据 因为没有获取就渲染的话 会导致高度塌陷\r\n    this.setState({\r\n      houseInfo: data,\r\n      isLoading: false,\r\n    });\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    await this.getHouseDetail();\r\n    const { community, coord } = this.state.houseInfo;\r\n    await this.renderMap(community, {\r\n      latitude: coord.latitude,\r\n      longitude: coord.longitude,\r\n    });\r\n  };\r\n\r\n  // 渲染轮播图结构\r\n  renderSwipers = () => {\r\n    const { houseInfo } = this.state;\r\n    console.log(houseInfo);\r\n    const { houseImg } = houseInfo;\r\n    return houseImg.map((item) => {\r\n      return (\r\n        <a\r\n          key={item}\r\n          href={BASE_URL + item}\r\n          style={{\r\n            display: \"inline-block\",\r\n            width: \"100%\",\r\n            height: 233,\r\n          }}\r\n        >\r\n          <img\r\n            src={BASE_URL + item}\r\n            alt=\"\"\r\n            style={{ width: \"100%\", verticalAlign: \"top\" }}\r\n          />\r\n        </a>\r\n      );\r\n    });\r\n  };\r\n\r\n  // 渲染地图\r\n  renderMap(community, coord) {\r\n    const { latitude, longitude } = coord;\r\n\r\n    const map = new BMap.Map(\"map\");\r\n    const point = new BMap.Point(longitude, latitude);\r\n    map.centerAndZoom(point, 17);\r\n\r\n    const label = new BMap.Label(\"\", {\r\n      position: point,\r\n      offset: new BMap.Size(0, -36),\r\n    });\r\n\r\n    label.setStyle(labelStyle);\r\n    label.setContent(`\r\n      <span>${community}</span>\r\n      <div class=\"${styles.mapArrow}\"></div>\r\n    `);\r\n    map.addOverlay(label);\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, houseInfo } = this.state;\r\n    const { community } = houseInfo;\r\n    const {\r\n      houseImg,\r\n      title,\r\n      price,\r\n      roomType,\r\n      size,\r\n      oriented,\r\n      floor,\r\n      tags,\r\n      supporting,\r\n      description,\r\n    } = houseInfo;\r\n    // console.log(houseInfo);\r\n    // console.log(houseImg);\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 导航栏 */}\r\n        <NavHeader\r\n          className={styles.navHeader}\r\n          rightContent={[<i key=\"share\" className=\"iconfont icon-share\" />]}\r\n        >\r\n          {community}\r\n        </NavHeader>\r\n\r\n        {houseImg ? (\r\n          <Carousel\r\n            autoplay={true}\r\n            infinite\r\n            autoplayInterval={4000}\r\n            dots={true}\r\n          >\r\n            {this.renderSwipers()}\r\n          </Carousel>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        {/* 房屋基础信息 */}\r\n        <div className={styles.info}>\r\n          <h3 className={styles.infoTitle}>{title}</h3>\r\n          <Flex className={styles.tags}>\r\n            {tags.map((item, index) => {\r\n              return (\r\n                <Flex.Item key={index}>\r\n                  <span\r\n                    className={[\r\n                      styles.tag,\r\n                      styles[`tag${(index % 3) + 1}`],\r\n                    ].join(\" \")}\r\n                  >\r\n                    {item}\r\n                  </span>\r\n                </Flex.Item>\r\n              );\r\n            })}\r\n          </Flex>\r\n\r\n          <Flex className={styles.infoPrice}>\r\n            <Flex.Item className={styles.infoPriceItem}>\r\n              <div>\r\n                {price}\r\n                <span className={styles.month}>/月</span>\r\n              </div>\r\n              <div>租金</div>\r\n            </Flex.Item>\r\n            <Flex.Item className={styles.infoPriceItem}>\r\n              <div>{roomType}</div>\r\n              <div>房型</div>\r\n            </Flex.Item>\r\n            <Flex.Item className={styles.infoPriceItem}>\r\n              <div>{size}平米</div>\r\n              <div>面积</div>\r\n            </Flex.Item>\r\n          </Flex>\r\n\r\n          <Flex className={styles.infoBasic} align=\"start\">\r\n            <Flex.Item>\r\n              <div>\r\n                <span className={styles.title}>装修：</span>\r\n                精装\r\n              </div>\r\n              <div>\r\n                <span className={styles.title}>楼层：</span>\r\n                {floor}\r\n              </div>\r\n            </Flex.Item>\r\n            <Flex.Item>\r\n              <div>\r\n                <span className={styles.title}>朝向：</span>\r\n                {oriented.join(\", \")}\r\n              </div>\r\n              <div>\r\n                <span className={styles.title}>类型：</span>普通住宅\r\n              </div>\r\n            </Flex.Item>\r\n          </Flex>\r\n        </div>\r\n\r\n        {/* 地图位置 */}\r\n        <div className={styles.map}>\r\n          <div className={styles.mapTitle}>\r\n            小区：\r\n            <span>{community}</span>\r\n          </div>\r\n          <div className={styles.mapContainer} id=\"map\">\r\n            地图\r\n          </div>\r\n        </div>\r\n\r\n        {/* 房屋配套 */}\r\n        <div className={styles.about}>\r\n          <div className={styles.houseTitle}>房屋配套</div>\r\n          <HousePackage list={supporting} />\r\n          {/* <div className=\"title-empty\">暂无数据</div> */}\r\n        </div>\r\n\r\n        {/* 房屋概况 */}\r\n        <div className={styles.set}>\r\n          <div className={styles.houseTitle}>房源概况</div>\r\n          <div>\r\n            <div className={styles.contact}>\r\n              <div className={styles.user}>\r\n                <img src={BASE_URL + \"/img/avatar.png\"} alt=\"头像\" />\r\n                <div className={styles.useInfo}>\r\n                  <div>王女士</div>\r\n                  <div className={styles.userAuth}>\r\n                    <i className=\"iconfont icon-auth\" />\r\n                    已认证房主\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <span className={styles.userMsg}>发消息</span>\r\n            </div>\r\n\r\n            <div className={styles.descText}>\r\n              {description || \"暂无房屋描述\"}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 推荐 */}\r\n        <div className={styles.recommend}>\r\n          <div className={styles.houseTitle}>猜你喜欢</div>\r\n          <div className={styles.items}>\r\n            {recommendHouses.map((item) => (\r\n              <HouseItem {...item} key={item.id} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 底部收藏按钮 */}\r\n        <Flex className={styles.fixedBottom}>\r\n          <Flex.Item>\r\n            <img\r\n              src={BASE_URL + \"/img/unstar.png\"}\r\n              className={styles.favoriteImg}\r\n              alt=\"收藏\"\r\n            />\r\n            <span className={styles.favorite}>收藏</span>\r\n          </Flex.Item>\r\n          <Flex.Item>在线咨询</Flex.Item>\r\n          <Flex.Item>\r\n            <a href=\"tel:400-618-4000\" className={styles.telephone}>\r\n              电话预约\r\n            </a>\r\n          </Flex.Item>\r\n        </Flex>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\components\\HousePackage\\index.js",[],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Login\\index.js",["142"],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\pages\\Register\\index.js",["143","144"],"C:\\Users\\1\\Documents\\2021年寒假\\React Advanced\\hkzf-mobile\\src\\utils\\token.js",["145"],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":7,"column":8,"nodeType":"152","messageId":"153","endLine":7,"endColumn":16},{"ruleId":"150","severity":1,"message":"154","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":16},{"ruleId":"150","severity":1,"message":"155","line":2,"column":18,"nodeType":"152","messageId":"153","endLine":2,"endColumn":22},{"ruleId":"150","severity":1,"message":"156","line":173,"column":23,"nodeType":"152","messageId":"153","endLine":173,"endColumn":34},{"ruleId":"150","severity":1,"message":"157","line":193,"column":13,"nodeType":"152","messageId":"153","endLine":193,"endColumn":21},{"ruleId":"150","severity":1,"message":"156","line":207,"column":17,"nodeType":"152","messageId":"153","endLine":207,"endColumn":28},{"ruleId":"150","severity":1,"message":"158","line":207,"column":30,"nodeType":"152","messageId":"153","endLine":207,"endColumn":39},{"ruleId":"150","severity":1,"message":"159","line":54,"column":11,"nodeType":"152","messageId":"153","endLine":54,"endColumn":24},{"ruleId":"150","severity":1,"message":"160","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":24},{"ruleId":"150","severity":1,"message":"161","line":2,"column":26,"nodeType":"152","messageId":"153","endLine":2,"endColumn":30},{"ruleId":"162","severity":1,"message":"163","line":185,"column":17,"nodeType":"164","messageId":"165","endLine":187,"endColumn":18},{"ruleId":"166","severity":1,"message":"167","line":104,"column":17,"nodeType":"168","endLine":104,"endColumn":37},{"ruleId":"150","severity":1,"message":"169","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":273,"column":9,"nodeType":"172","messageId":"173","endLine":274,"endColumn":17},{"ruleId":"174","severity":1,"message":"175","line":37,"column":38,"nodeType":"176","messageId":"177","endLine":37,"endColumn":40},{"ruleId":"150","severity":1,"message":"178","line":4,"column":8,"nodeType":"152","messageId":"153","endLine":4,"endColumn":17},{"ruleId":"150","severity":1,"message":"179","line":30,"column":7,"nodeType":"152","messageId":"153","endLine":30,"endColumn":21},{"ruleId":"180","severity":1,"message":"181","line":59,"column":3,"nodeType":"182","messageId":"177","endLine":61,"endColumn":4},{"ruleId":"150","severity":1,"message":"183","line":167,"column":13,"nodeType":"152","messageId":"153","endLine":167,"endColumn":22},{"ruleId":"150","severity":1,"message":"184","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"185","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"150","severity":1,"message":"184","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"186","line":1,"column":10,"nodeType":"152","messageId":"153","endLine":1,"endColumn":14},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'BASE_URL' is defined but never used.","Identifier","unusedVar","'NavBar' is defined but never used.","'Icon' is defined but never used.","'indexActive' is assigned a value but never used.","'cityList' is assigned a value but never used.","'cityIndex' is assigned a value but never used.","'alertInstance' is assigned a value but never used.","'Carousel' is defined but never used.","'Grid' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getToken' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'PropTypes' is defined but never used.","'changeSelected' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'componentWillUnmount'.","MethodDefinition","'isLoading' is assigned a value but never used.","'Flex' is defined but never used.","'Component' is defined but never used.","'func' is defined but never used.","no-global-assign","no-unsafe-negation"]